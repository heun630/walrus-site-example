name: Build and Deploy to Walrus

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      update-walrus-site:
        description: "Update the Walrus Site"
        type: boolean
        required: true
        default: true

concurrency: ci-${{ github.ref }}

permissions:
  contents: read

jobs:
  publish-walrus:
    name: Update Walrus Site
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || inputs.update-walrus-site == true }}
    env:
      NO_COLOR: 1
      RUST_LOG: info
      EPOCHS: 5
      BUILD_DIR: dist
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
      
      - name: Set up Walrus
        run: |
          # Download site-builder
          curl -L https://storage.googleapis.com/mysten-walrus-binaries/site-builder-mainnet-latest-ubuntu-x86_64 -o site-builder
          chmod +x site-builder
          
          # Download walrus CLI (required by site-builder)
          curl -L https://storage.googleapis.com/mysten-walrus-binaries/walrus-mainnet-latest-ubuntu-x86_64 -o walrus
          chmod +x walrus
          sudo mv walrus /usr/local/bin/walrus
          
          # Skip validation - GitHub masks secrets in logs
          
          # Setup Sui configuration
          mkdir -p ~/.sui/sui_config
          echo '${{ secrets.SUI_KEYSTORE }}' > ~/.sui/sui_config/sui.keystore
          
          # Verify keystore exists
          if [ ! -s ~/.sui/sui_config/sui.keystore ]; then
            echo "❌ Keystore file is empty or missing!"
            echo "Current keystore size: $(wc -c < ~/.sui/sui_config/sui.keystore) bytes"
            exit 1
          fi
          echo "✅ Keystore file exists ($(wc -c < ~/.sui/sui_config/sui.keystore) bytes)"
          
          # Create client config
          cat > ~/.sui/sui_config/client.yaml << EOF
          ---
          keystore:
            File: ~/.sui/sui_config/sui.keystore
          envs:
            - alias: mainnet
              rpc: "https://fullnode.mainnet.sui.io:443"
              ws: null
              basic_auth: null
          active_env: mainnet
          active_address: "${{ vars.SUI_ADDRESS }}"
          EOF
          
          # Create Walrus config
          mkdir -p ~/.config/walrus
          if [ -n "${{ vars.WALRUS_CONFIG }}" ]; then
            echo '${{ vars.WALRUS_CONFIG }}' > ~/.config/walrus/client_config.yaml
          else
            echo "⚠️  WALRUS_CONFIG not set - creating default configuration"
            cat > ~/.config/walrus/client_config.yaml << EOF
          ---
          mainnet:
            wallet_config: ~/.sui/sui_config/client.yaml
            system_object: 0x2134d52768ea07e8c43570ef975eb3e4c27a39fa6396bef985b5abc58d03ddd2
            gas_budget: 500000000
            aggregator_endpoints:
              - url: https://aggregator.walrus.space
            publisher_endpoints:
              - url: https://publisher.walrus.space
          EOF
          fi
          
          # Create sites config for site-builder
          cat > sites-config.yaml << EOF
          ---
          package: "0x2134d52768ea07e8c43570ef975eb3e4c27a39fa6396bef985b5abc58d03ddd2"
          general:
            rpc_url: "https://fullnode.mainnet.sui.io:443"
            wallet_config: "~/.sui/sui_config/client.yaml"
            walrus_context: "mainnet"
            gas_budget: 500000000
          EOF

      - name: Deploy to Walrus Site
        run: |
          # Debug configuration files
          echo "=== Debugging Configuration Files ==="
          echo "Sui client config:"
          cat ~/.sui/sui_config/client.yaml
          echo ""
          echo "Walrus config:"
          cat ~/.config/walrus/client_config.yaml
          echo ""
          echo "Sites config:"
          cat sites-config.yaml
          echo ""
          
          # Test walrus CLI directly
          echo "=== Testing walrus CLI directly ==="
          walrus --version || echo "Walrus version failed"
          
          # Simple test first
          echo "=== Testing site-builder ==="
          ./site-builder --help | head -5
          
          if [ -n "${{ vars.WALRUS_SITE_OBJECT }}" ]; then
            echo "Updating existing site: ${{ vars.WALRUS_SITE_OBJECT }}"
            ./site-builder --config sites-config.yaml update ${{ env.BUILD_DIR }} ${{ vars.WALRUS_SITE_OBJECT }} --epochs ${{ env.EPOCHS }} --check-extend
          else
            echo "Publishing new site..."
            ./site-builder --config sites-config.yaml publish ${{ env.BUILD_DIR }} --epochs ${{ env.EPOCHS }}
            echo ""
            echo "⚠️  IMPORTANT: Add the returned site object ID to GitHub Variables as 'WALRUS_SITE_OBJECT'"
            echo "   Settings → Secrets and variables → Actions → Variables"
          fi